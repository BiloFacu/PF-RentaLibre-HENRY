// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

//lastname username y pasword optional para que funcione con google sing in 
model User {
  name           String 
  lastName       String ?
  userName       String ? 
  password       String ?
  email          String @unique
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  products       Product[]
  rater          Rating[] @relation(name: "userRater")
  rated          Rating[] @relation(name: "userRated")
  userPicture    String?
  seller         Transanction[] @relation(name: "seller")
  buyer          Transanction[] @relation(name: "buyer") 
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  favorites      Favorito[]
  active         Boolean @default(true)
  feedback       String?
  role Role @default(USER)
}
model Favorito {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  user               User?   @relation(fields: [userId], references: [id])
  userId             String? @db.ObjectId
  product            Product?   @relation(fields: [productId], references: [id])
  productId          String? @db.ObjectId
  active             Boolean @default(true)  
   detetedAt          DateTime?        
}
model Product {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  price              Float  
  rating             Rating[]  
  user               User?   @relation(fields: [userId], references: [id])
  userId             String? @db.ObjectId
  pictures           String[] @default([])
  description        String
  category           Category  @relation(fields: [categoryId], references: [id])
  categoryId         String @db.ObjectId          
  availability       Availability?
  features           Feature?
  createdAt          DateTime @default(now())
  favorito           Favorito[]
  transaction        Transanction[]
  paymentMethod      PaymentMethod?  @relation(fields: [methodName], references: [paymentName])
  methodName         String?
}

model Category {
name     String
id       String @id @default(auto()) @map("_id") @db.ObjectId
products Product[]
}

type Availability {
  available  Boolean 
  dateAvailable String[]
}

type Feature {
  features   String[]
}

model Rating {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  comment            String?
  stars              String
  userRater          User   @relation(fields: [userRaterId], references: [id],name: "userRater")
  userRaterId        String @db.ObjectId
  userRated          User?   @relation(fields: [userRatedId], references: [id], name: "userRated")
  userRatedId        String? @db.ObjectId
  product            Product?   @relation(fields: [productId], references: [id])
  productId          String? @db.ObjectId
  createdAt          DateTime @default(now())
}

model PaymentMethod {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  paymentName     String @unique
  type            String
  product         Product[]
  transaction     Transanction[]
} 

model Transanction {
  paymentMethod PaymentMethod?  @relation(fields: [methodName], references: [paymentName])
  methodName    String? 
  transactionID String @id @default(auto()) @map("_id") @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  productId     String @db.ObjectId      
  createdAt     DateTime @default(now())
  seller        User @relation(fields: [sellerId], references: [id], name:"seller")
  buyer         User @relation(fields: [buyerId], references: [id], name: "buyer")
  sellerId      String @db.ObjectId
  buyerId       String @db.ObjectId

}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId 
  userId            String @db.ObjectId 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId 
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
 @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}