import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../../utils/trpc";
import { ChangeEvent, FormEvent, useState } from "react";


const Home: NextPage = () => {
 const [user,setUser] = useState({
  name: "",
  lastName:"",
  userName:"",
  email:"",
  password:""
 })
 const [product,setProduct] = useState({
  title: "",
  price:"",
  category:"",
  description:"",
  availability:{available:true,dateAvailable: ['','']},
 })
 const [rating,setRating] = useState({
  comment: "",
  stars:''
 })
 const [ratingProduct,setRatingProduct] = useState({
  comment: "",
  stars:''
 })
 const createRatingProduct = trpc.rating.createRatingProduct.useMutation()
 const createRatingUser = trpc.rating.createRatingUser.useMutation()
 const deleteU = trpc.user.userDelete.useMutation()
 const createUser = trpc.user.createUser.useMutation()
 const createProduct = trpc.product.createProducts.useMutation()
 const deleteP = trpc.product.deleteProduct.useMutation()
 const updateP = trpc.product.updateProduct.useMutation()
 const updateR = trpc.rating.updateRating.useMutation()
 const deleteR = trpc.rating.deleteRating.useMutation()
 const addF= trpc.user.addFavorite.useMutation()
 const deleteF = trpc.user.deleteFavorite.useMutation()
 const makeTransaction = trpc.user.makeTransaction.useMutation()
 const createPayment= trpc.user.createPaymentMethod.useMutation()

 function handleSubmit (e: FormEvent<HTMLFormElement>) {
  e.preventDefault()
  createUser.mutate(user)
 }

 
 function handleChange (e: ChangeEvent<HTMLInputElement>) {
  setUser({
    ...user,
    [e.target.name]: e.target.value
  })
 }

 function handleSubmitProduct (e: FormEvent<HTMLFormElement>) {
  e.preventDefault()
  createProduct.mutate(product)
 }

 
 function handleChangeProduct (e: ChangeEvent<HTMLInputElement>) {
  if (e.target.name === 'availability1') {
     const dateToString1 = e.target.value + ''
     product.availability.dateAvailable[0]=dateToString1
    }
    if (e.target.name === 'availability2') {
      const dateToString2 = e.target.value + ''
      product.availability.dateAvailable[1]=dateToString2
     }
  setProduct({
    ...product,
    [e.target.name]: e.target.value
  })
 }

 function handleSubmitRating (e: FormEvent<HTMLFormElement>) {
  e.preventDefault()
  createRatingUser.mutate(rating)
 }

 
 function handleChangeRating (e: ChangeEvent<HTMLInputElement>) {
  setRating({
    ...rating,
    [e.target.name]: e.target.value
  })
 }

 function handleSubmitRatingProduct (e: FormEvent<HTMLFormElement>) {
  e.preventDefault()
  createRatingProduct.mutate(ratingProduct)
 }

 
 function handleChangeRatingProduct (e: ChangeEvent<HTMLInputElement>) {
  setRatingProduct({
    ...ratingProduct,
    [e.target.name]: e.target.value
  })
 }

 function createPaymentmethod (){
   createPayment.mutate()
  makeTransaction.mutate()
 }

 function deleteProduct () {
   deleteP.mutate()
   deleteR.mutate()
 }

 function updateProduct () {
  updateP.mutate()
  updateR.mutate()
}

function deleteUser () {
  deleteU.mutate()
}

function addFavorite () {
  addF.mutate()
}

function deleteFavorite () {
  deleteF.mutate()
}
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Creation of Users</h1> 
      <form onSubmit={(e)=>handleSubmit(e)}>
        <input name='name' type='text' placeholder="name" onChange={(e)=>handleChange(e)}/>
        <input name='lastName' type='text' placeholder="lastName" onChange={(e)=>handleChange(e)}/>
        <input name='userName' type='text' placeholder="userName" onChange={(e)=>handleChange(e)}/>
        <input name='email' type='text' placeholder="email" onChange={(e)=>handleChange(e)}/>
        <input name='password' type='password' placeholder="password" onChange={(e)=>handleChange(e)}/>
        <input type='submit'  value='done'/>
      </form>

     <h1>Creation of Products</h1> 
     <form onSubmit={(e)=>handleSubmitProduct(e)}>
        <input name='title' type='text' placeholder="title" onChange={(e)=>handleChangeProduct(e)}/>
        <input name='price' type='text' placeholder="price" onChange={(e)=>handleChangeProduct(e)}/>
        <input name='category' type='text' placeholder="category" onChange={(e)=>handleChangeProduct(e)}/>
        <input name='description' type='text' placeholder="description" onChange={(e)=>handleChangeProduct(e)}/>
        <input name='availability1' type='date'  onChange={(e)=>handleChangeProduct(e)}/>
        <input name='availability2' type='date'  onChange={(e)=>handleChangeProduct(e)}/>
        <input type='submit'  value='done'/>
      </form>

      <h1>Creation of rating for users</h1>  
      <form onSubmit={(e)=>handleSubmitRating(e)}>
        <input name='comment' type='text' placeholder="comment..." onChange={(e)=>handleChangeRating(e)}/>
        <input name='stars' type='string' placeholder="stars" onChange={(e)=>handleChangeRating(e)}/>
        <input type='submit'  value='done'/>
      </form>

      <h1>Creation of rating for products</h1>  
      <form onSubmit={(e)=>handleSubmitRatingProduct(e)}>
        <input name='comment' type='text' placeholder="comment..." onChange={(e)=>handleChangeRatingProduct(e)}/>
        <input name='stars' type='string' placeholder="stars" onChange={(e)=>handleChangeRatingProduct(e)}/>
        <input type='submit'  value='done'/>
      </form>
      <button onClick={createPaymentmethod}>upload payment method</button>
      <button onClick={deleteProduct}>    D product</button>
      <button onClick={updateProduct}>    U product</button>
      <button onClick={deleteUser}>    Delete User</button>
      <button onClick={addFavorite}>Add Favorite</button>
      <button onClick={deleteFavorite}>Delete Favorite</button>

  </>
  );
};

export default Home;